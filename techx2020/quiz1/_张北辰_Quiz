{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TechX 2020 计算社科预习 Quiz 1 V1.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这个测试的目的不是为了难倒大家，而是为了检验预习成果，方便我们调整接下来的预习和课程安排。同时，我们也希望你们能通过这几个练习学到的知识，并学到的coding技巧。因此，我们有如下要求：\n",
    "1. 虽然我们不允许大家向别人请教 quiz 中的问题，但是你们可以在互联网上搜索已有的资源：这也是在TechX的学习过程中大家会一直做的。（PS 请别直接抄代码！请理解之后自己实现）\n",
    "2. 有些题目里会给出一些变量/数据，但是我们批改的时候可能会改动它们以检测你程序的可拓展性。\n",
    "3. 请在北京时间7.19 24:00之前提交（提交方式群里会再通知），如有事无法按时请私信胡启天。\n",
    "4. 如果感觉题目有问题或表述不清请直接在群里提出。我们有可能根据大家的提问发布V2.0 的 Quiz。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 打印数字\n",
    "打印出以下文字（不能使用九个print()）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "999999999"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1\n",
    "22\n",
    "333\n",
    "4444\n",
    "55555\n",
    "666666\n",
    "7777777\n",
    "88888888\n",
    "999999999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "22\n",
      "333\n",
      "4444\n",
      "55555\n",
      "666666\n",
      "7777777\n",
      "88888888\n",
      "999999999\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,10):\n",
    "    print(str(i)*i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 统计词语\n",
    "请统计下面这段文字里出现次数最多的五个英文单词及其出现次数。创建一个key为词语，对应value为该词出现的次数的dictionary来记录这五个词。如有并列不用深究，输出前五个即可。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "asd f asdf dsa fs df asdf asd fsd f dsf d fs adf asdf s dfas df asdf d f dsf ds fsa fsd f asdf as df ds afd g asdf asdfa sdf sd fsd f sdf sd fs df sda f sadf asd f sdf sd fd fd  sd asd sa s as as d asd a ds f sdf asd fa sdf as df asdf as d sdf sdf sd  sd ds sd f df ds fs adfasd f d fdf d  d d d dd df sadf a sdf asdf asdf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('f', 10), ('asdf', 9), ('d', 9), ('sdf', 8), ('df', 7)]\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter \n",
    "    \n",
    "text = 'asd f asdf dsa fs df asdf asd fsd f dsf d fs adf asdf s dfas df asdf d f dsf ds fsa fsd f asdf as df ds afd g asdf asdfa sdf sd fsd f sdf sd fs df sda f sadf asd f sdf sd fd fd sd asd sa s as as d asd a ds f sdf asd fa sdf as df asdf as d sdf sdf sd sd ds sd f df ds fs adfasd f d fdf d d d d dd df sadf a sdf asdf asdf'\n",
    "words = text.split()\n",
    "word_freq = Counter(words)\n",
    "top_five = word_freq.most_common(5)\n",
    "print(top_five)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. list equal?\n",
    "Write a function that checks if two lists are equal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lista = [3,4,5]\n",
    "listb = [4,5,6,7] # the lists could be different"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Are the two lists equal?\n",
      "Nope...\n"
     ]
    }
   ],
   "source": [
    "def are_equal(lista, listb):\n",
    "    if lista == listb:\n",
    "        return 'Yeah!'\n",
    "    else:\n",
    "        return 'Nope...'\n",
    "\n",
    "lista = [3,4,5]\n",
    "listb = [4,5,6,7]\n",
    "print('Are the two lists equal?')\n",
    "print(are_equal(lista,listb))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Leap year? \n",
    "Usually years that are divisible by 4 are leap years, for example 1996. However, years that are divisible by 100 (for example, 1900) are not leap years, but years that are divisible by 400 are leap years (for example, 2000). Write a function that takes in a year and computes whether that year is a leap year. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "year = 1937 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "def is_leap(year):\n",
    "    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0 \n",
    "\n",
    "print(is_leap(1937))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Day of Year?\n",
    "输入某年某月某日，判断这一天是这一年的第几天？(提示：请使用上一题的函数)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "year = 2038\n",
    "month = 2\n",
    "day = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34\n"
     ]
    }
   ],
   "source": [
    "def is_leap(year):\n",
    "    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0 \n",
    "\n",
    "def which_day(year, month, day):\n",
    "    days_in_month = [\n",
    "        [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], \n",
    "        [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n",
    "    ][is_leap(year)]\n",
    "    total = 0\n",
    "    for i in range(month-1):\n",
    "        total += days_in_month[i]\n",
    "    return total + day\n",
    "\n",
    "print(which_day(2038, 2, 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Calculate Product\n",
    "Write a function that takes two positive integers returns their product without using the symbol “*”\n",
    "1.  Use iteration (for loop)\n",
    "2.  Use recursion (extra exercise) -- 非必做，感兴趣的同学请自行搜索什么是recursion/递归"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 8\n",
    "b = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160\n"
     ]
    }
   ],
   "source": [
    "#using iteration\n",
    "\n",
    "def product(a, b):\n",
    "    output = 0\n",
    "    for i in range(b):\n",
    "        output += a\n",
    "    return output\n",
    "\n",
    "a, b = 8, 20\n",
    "print(product(a, b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160\n"
     ]
    }
   ],
   "source": [
    "#using recursion\n",
    "\n",
    "def product(a, b):\n",
    "    if b == 1:\n",
    "        return a\n",
    "    else:\n",
    "        return a + product(a, b - 1)\n",
    "    \n",
    "a, b = 8, 20\n",
    "print(product(a, b))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Reverse and Combine\n",
    "Write a function named reverse_combine() to reverse and combine two strings with the same length.  Ex: reverse_combine(“12345”, “abcde”) returns “5e4d3c2b1a”\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "different lengths, unable to complete task\n"
     ]
    }
   ],
   "source": [
    "def reverse_combine(string1, string2):\n",
    "    output = ''\n",
    "    if len(string1) != len(string2):\n",
    "        return 'different lengths, unable to complete the task'\n",
    "    for i in range(1, len(string1) + 1):\n",
    "        output += string1[-i]\n",
    "        output += string2[-i]\n",
    "    return output\n",
    "\n",
    "string1 = '12345'\n",
    "string2 = 'abcde'\n",
    "print(reverse_combine(string1, string2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. 二进制转换\n",
    "编写一个将十进制转换为二进制的函数，要求采用“除2取余”的方式，结果与调用 bin() 一样返回字符串形式（提示：请了解Python中 %   /  // 三种除法的区别）\n",
    "不要求加上bin()输出后面的'0b'。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b1'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b10'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b11'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11000000111\n"
     ]
    }
   ],
   "source": [
    "def reverse(string):\n",
    "    output = ''\n",
    "    for i in range(1, len(string) + 1):\n",
    "        output += string[-i]\n",
    "    return output\n",
    "\n",
    "def to_binary(n):\n",
    "    output = ''\n",
    "    while n > 0:\n",
    "        output += str(int(n%2))\n",
    "        n = n//2\n",
    "    return(reverse(output))\n",
    "        \n",
    "print(to_binary(1543))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 反馈\n",
    "如果你对这个quiz的难度，预习的进度，以及课程目前以来的任何方面有任何建议或者问题都欢迎写在下面！"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
